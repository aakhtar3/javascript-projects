`use strict`;

/********************
 * Service - Business Logic
 *******************/

/**
 * Builds HTML repsonse
 * @param {Object} res 
 * @param {String} html 
 */
const writeHtml = (res, html = `<div>ERROR</div>`) => {
  res.writeHead(200, { 'Content-Type': `text/html` });
  res.end(html);
};

/**
 * Attempts to get origin URL
 * @param {Object} req 
 * @returns {String}
 */
const getOrigin = (req) => req && req.originalUrl && typeof req.originalUrl === `string` && req.originalUrl.split(`/`)[1] || ``;

/**
 * Builds the Header section of the table
 * @param {Object} report 
 * @returns {String}
 */
const getSections = (report) => Object.keys(report).map((key) => `<th>${ key }</th>`).join(``);

/**
 * Builds the Table section for the Commands
 * @param {Object} report 
 * @returns {String} 
 */
const getCommands = (report) => {
  // Run commands and init reference variables
  const commands = [];
  let rows = 0;

  // Determine how many rows are needed in the table
  const getDepth = (section) => { if (rows < report[section].length) rows = report[section].length - 1; };
  Object.keys(report).forEach(getDepth);

  // Build the rows to meet the format of an HTML table
  const buildRows = (section, index) => {
    // Build 2D Array on first iteration that will hold the HTML table
    if (index === 0) for (let depth = 0; depth <= rows; depth++) commands.push([]);
    // Decorate command with html
    report[section] = report[section].map((command) => `<td><b>${ Object.keys(command)[0] }</b></br>${ Object.values(command)[0] }</td>`);
    // Add command to list
    for (let depth = 0; depth <= rows; depth++) commands[depth].push(report[section][depth] || `<td>-</td>`);
  };
  Object.keys(report).forEach(buildRows);

  // Finalize row with HTML
  const tableCommands = commands.map((section) => `<tr>${ section }</tr>`).join(``);
  return tableCommands;
};

module.exports = {
  writeHtml,
  getOrigin,
  getSections,
  getCommands
};
